---
- name: Deploy Jenkins Slave node
  hosts: jenkins-slave
  become: yes
  remote_user: ec2-user

  vars:
    ansible_python_interpreter: /usr/bin/python3.7

  tasks:
    # - name: Generate SSH Keypair
    #   openssh_keypair:
    #     path: /home/ec2-user/.ssh/id_rsa
    #     type: rsa
    #     size: 2048
    #     group: ec2-user
    #     owner: ec2-user
    
    # - name: Add own key to authorized_keys file
    #   shell: "cat /home/ec2-user/.ssh/id_rsa.pub >> /home/ec2-user/.ssh/authorized_keys && chmod 600 /home/ec2-user/.ssh/authorized_keys"

    - name: Wait for EC2 instance to become available
      wait_for_connection:
        timeout: 300

    - name: Set server hostname
      ansible.builtin.hostname:
        name: slave

    - name: Create .ssh directory
      file:
        path: /home/ec2-user/.ssh
        state: directory
        mode: '0700'

    - name: Copy SSH private key to worker
      copy:
        src: ../.ssh/jenkins_rsa
        dest: /home/ec2-user/.ssh/jenkins_rsa
        owner: ec2-user
        group: ec2-user
        mode: '0600'

    - name: Add public key to authorized_keys file
      authorized_key:
        user: ec2-user
        key: "{{ lookup('file', '../.ssh/jenkins_rsa.pub') }}"

    - name: Copy over Jenkins Worker Node creation payload xml
      vars: 
        ipv4: "{{ ansible_default_ipv4.address }}"
      template:
        src: templates/node.j2
        dest: /home/ec2-user/node.xml
        owner: ec2-user
        mode: '0644'

    - name: Read private key id_rsa
      slurp:
        src: /home/ec2-user/.ssh/jenkins_rsa
      register: pkey

    - name: Copy over creds.xml and create Jenkins credential
      vars:
        priv_key: "{{ pkey['content'] | b64decode }}"
        ipv4: "{{ ansible_default_ipv4.address }}"
      template:
        src: templates/cred-privkey.j2
        dest: /home/ec2-user/creds.xml

    - name: install dependencies
      yum:
        name: "{{ package }} "
      vars:
        package:
        - wget
        - java-11-amazon-corretto-headless
        - git
        - python3-pip
        - docker
    
    - name: Add jenkins user to Docker group
      user:
        name: jenkins
        groups: docker
        append: yes
      
    - name: Install Docker Compose
      pip:
        name: docker-compose
        state: present
        executable: pip3
      
    - name: Restart Docker service
      service:
        name: docker
        state: restarted
        enabled: yes

    - name: Get Jenkins CLI jar file
      vars:
        master: "{{ master_ip }}"
      get_url:
        url: "http://{{ master }}:8080/jnlpJars/jenkins-cli.jar"
        dest: /home/ec2-user/jenkins-cli.jar
        force: yes
      register: download
      ignore_errors: yes
      until: download.status_code|default(200) == 200
      retries: 5
      delay: 5
      
    - name: Allow execute perm to jenkins-cli.jar
      file:
        path: /home/ec2-user/jenkins-cli.jar
        owner: ec2-user
        group: ec2-user
        mode: '0777'
        
    - name: Place Jenkins Auth file
      copy:
        src: templates/jenkins_auth
        dest: /home/ec2-user/
        owner: ec2-user
        mode: '0600'

    # - name: Create Jenkins Credential
    #   vars:
    #     master: "{{ master_ip }}"
    #   shell: "cat /home/ec2-user/creds.xml | java -jar /home/ec2-user/jenkins-cli.jar -auth @/home/ec2-user/jenkins_auth -s http://{{master}}:8080 create-credentials-by-xml system::system::jenkins _"

    # - name: Register node as worker
    #   vars:
    #     master: "{{ master_ip }}"
    #   shell: 'cat /home/ec2-user/node.xml | java -jar /home/ec2-user/jenkins-cli.jar -auth @/home/ec2-user/jenkins_auth -s http://{{ master }}:8080 create-node'
